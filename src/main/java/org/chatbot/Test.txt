package com.manideepr.chat;

import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.components.Service;
import com.intellij.openapi.project.Project;
import org.chatbot.ChatBotAPI;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Service(Service.Level.PROJECT)
public final class ChatService {

  public interface Sink {
    void onUser(String text);
    void onAssistant(String text);
    void onError(String message);
    default void onReset() {}
  }

  private enum Role { USER, ASSISTANT, ERROR }

  private static final class Msg {
    final Role role; final String text;
    Msg(Role role, String text) { this.role = role; this.text = text; }
  }

  // Thread-safe transcript store
  private final List<Msg> transcript = Collections.synchronizedList(new ArrayList<>());

  private volatile @Nullable Sink sink;

  public static ChatService getInstance(Project project) {
    return project.getService(ChatService.class);
  }

  /** UI registers to receive updates. We immediately replay the transcript. */
  public void setSink(@Nullable Sink sink) {
    this.sink = sink;
    if (sink == null) return;

    sink.onReset();

    List<Msg> snapshot;
    synchronized (transcript) { snapshot = new ArrayList<>(transcript); }
    for (Msg m : snapshot) {
      switch (m.role) {
        case USER      -> sink.onUser(m.text);
        case ASSISTANT -> sink.onAssistant(m.text);
        case ERROR     -> sink.onError(m.text);
      }
    }
  }

  /** Clear current conversation (optional helper) */
  public void clear() {
    transcript.clear();
    Sink s = sink;
    if (s != null) s.onReset();
  }

  /** Main entry point used by tool window + inline popup. */
  public void ask(@Nullable String selection, String question) {
    final String prompt = (selection == null || selection.isBlank())
        ? question
        : question + "\n\n[Selection]\n" + selection;

    recordAndNotify(Role.USER, question);

    ApplicationManager.getApplication().executeOnPooledThread(() -> {
      try {
        String answer = ChatBotAPI.ask(prompt);
        ApplicationManager.getApplication().invokeLater(() ->
            recordAndNotify(Role.ASSISTANT, answer));
      } catch (Exception ex) {
        ApplicationManager.getApplication().invokeLater(() ->
            recordAndNotify(Role.ERROR, "Request failed: " + ex.getMessage()));
      }
    });
  }

  private void recordAndNotify(Role role, String text) {
    transcript.add(new Msg(role, text));
    Sink s = sink;
    if (s == null) return;
    switch (role) {
      case USER      -> s.onUser(text);
      case ASSISTANT -> s.onAssistant(text);
      case ERROR     -> s.onError(text);
    }
  }
}

package com.manideepr.chat;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindow;
import com.intellij.openapi.wm.ToolWindowFactory;
import com.intellij.ui.SimpleToolWindowPanel;
import com.intellij.ui.components.JBScrollPane;
import com.intellij.ui.components.panels.VerticalBox;
import com.intellij.ui.content.Content;
import com.intellij.ui.content.ContentFactory;
import com.intellij.util.Disposer;
import com.intellij.util.ui.JBUI;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;

public class ChatToolWindowFactory implements ToolWindowFactory {

  @Override
  public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
    SimpleToolWindowPanel root = new SimpleToolWindowPanel(true, true);

    // Messages area
    VerticalBox messages = new VerticalBox();
    messages.setBorder(JBUI.Borders.empty(8, 12));
    JBScrollPane scroll = new JBScrollPane(messages);

    // Input row
    ChatInputPanel input = new ChatInputPanel(text -> {
      if (!text.isBlank()) {
        ChatService.getInstance(project).ask(null, text);
      }
    });

    JPanel content = new JPanel(new BorderLayout());
    content.add(scroll, BorderLayout.CENTER);
    content.add(input, BorderLayout.SOUTH);
    root.setContent(content);

    // Wire service sink
    ChatService chat = ChatService.getInstance(project);
    chat.setSink(new ChatService.Sink() {
      @Override public void onReset() {
        messages.removeAll();
        messages.revalidate(); messages.repaint();
      }
      @Override public void onUser(String text) {
        messages.add(ChatBubbles.user(text));
        refresh();
      }
      @Override public void onAssistant(String text) {
        messages.add(ChatBubbles.assistant(text));
        refresh();
      }
      @Override public void onError(String message) {
        messages.add(ChatBubbles.assistant("⚠️ " + message));
        refresh();
      }
      private void refresh() {
        messages.revalidate(); messages.repaint();
        SwingUtilities.invokeLater(() ->
            scroll.getVerticalScrollBar().setValue(
                scroll.getVerticalScrollBar().getMaximum()));
      }
    });

    Content tab = ContentFactory.getInstance().createContent(root, "Chat", false);
    Disposer.register(tab, () -> ChatService.getInstance(project).setSink(null));
    toolWindow.getContentManager().addContent(tab);
  }
}

package com.manideepr.chat.actions;

import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.LogicalPosition;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.popup.JBPopupFactory;
import com.intellij.ui.awt.RelativePoint;
import com.intellij.ui.components.JBLabel;
import com.intellij.util.ui.JBUI;
import com.manideepr.chat.ChatService;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;

public class AskSelectionAction extends AnAction {
  @Override
  public void actionPerformed(@NotNull AnActionEvent e) {
    Project project = e.getProject();
    Editor editor = e.getData(CommonDataKeys.EDITOR);
    if (project == null || editor == null) return;

    String selected = editor.getSelectionModel().getSelectedText();

    JPanel panel = new JPanel(new BorderLayout(6,6));
    panel.setBorder(JBUI.Borders.empty(8));
    panel.add(new JBLabel("Ask about selection:"), BorderLayout.NORTH);

    JTextField field = new JTextField();
    panel.add(field, BorderLayout.CENTER);

    var popup = JBPopupFactory.getInstance()
        .createComponentPopupBuilder(panel, field)
        .setRequestFocus(true)
        .setMovable(true)
        .setResizable(true)
        .createPopup();

    // Show below the caret
    LogicalPosition pos = editor.getCaretModel().getLogicalPosition();
    Point caretPoint = editor.logicalPositionToXY(pos);
    caretPoint.translate(0, editor.getLineHeight());
    popup.show(new RelativePoint(editor.getContentComponent(), caretPoint));

    field.addActionListener(ev -> {
      String question = field.getText().trim();
      popup.cancel();
      if (question.isEmpty()) return;

      var tw = com.intellij.openapi.wm.ToolWindowManager.getInstance(project).getToolWindow("Chat");
      if (tw != null) {
        // Activate tool window first, then ask (ensures sink is set so user bubble shows)
        tw.activate(() -> ChatService.getInstance(project).ask(selected, question), true);
      } else {
        ChatService.getInstance(project).ask(selected, question);
      }
    });
  }
}



